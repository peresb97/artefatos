// importando um componente
utilitarios = Scripts.utilitarios_contabil_cloud.importar();

//DEFININDO A ESTRUTURA DA FONTE DINAMICA, ESSES CAMPOS IRÃO COMPOR AS FIELDS DO JRXML
esquema = [
	principalId: Esquema.caracter,
	entidadeId: Esquema.caracter,
	entidadeNome: Esquema.caracter,
	dataMov: Esquema.data,
	tipoDoc: Esquema.caracter,
	numeroDoc: Esquema.caracter,
	numeroPagamento: Esquema.caracter,
	numeroEmpenho: Esquema.caracter,
	numeroProcesso: Esquema.caracter,
	nomeCredor: Esquema.caracter,
	valorAPagar: Esquema.numero,
	valorPago: Esquema.numero,
	valorRecurso: Esquema.numero,
	numeroRecurso: Esquema.caracter,
	descricaoRecurso: Esquema.caracter
];

fonte = Dados.dinamico.v2.novo(esquema);

paramExercicio = parametros.exercicio.valor?:null
paramEntidade = parametros.entidades.valor?:null
paramDataInicial = parametros.dataInicial?.valor?:null
paramDataInicial = dataInicial.format("yyyy-MM-dd")
paramDataFinal = parametros.dataFinal?.valor?:null
//tipoDocumento = parametros.tipoDocumento.selecionado.valor?:nulo
//conta = parametros.conta.valor?:nulo
paramCredor = parametros.credor.valor?:null
paramComprovantes = parametros.comprovantes.selecionado.valor?:null
paramAnulacoes = parametros.anulacoes.selecionado.valor?:null
paramHistorico = parametros.historico.valor?:null

criterioEntidade = ""
if(paramEntidade){
	criterioEntidade = " and entidade.id in ($paramEntidade)"
}

if(dataFinal){
	paramDataFinal = dataFinal.format("yyyy-MM-dd")
} else {
	paramDataFinal = Datas.hoje().format("yyyy-MM-dd")
}

criterioCredor = ""
if(credor){
	criterioCredor = " and credor.id in ($paramCredor)"
}

parametrosCredores = [];
se(credor){
	credor = credor.dividir(~/,/)
	percorrer(credor){
		parametrosCredores << Integer.valueOf(item)
	}
}

// pegando os parametros orçamentários do exercicio
configuracoesOrcamentarias = utilitarios.configuracoesCloud(exercicio);

// pegando os ids das configurações do exercicio retornada pelo componente anterior
idRecurso = configuracoesOrcamentarias.find{item -> item.configuracao == "RECURSO"};

idNaturezaDespesa = configuracoesOrcamentarias.find{item -> item.configuracao == "NATUREZA_DESPESA"};

// pegando as formatações das mascaras de configurações do sistema
marcaraRecurso = utilitarios.formatacaoMascara(idRecurso);

mascaraNarureza = utilitarios.formatacaoMascara(idNaturezaDespesa);


// BUSCA DADOS DAS LIQUIDAÇÕES DOS EMPENHOS

fonteLiquidacoesEmpenhos = Dados.contabilidade.v1.liquidacoesEmpenhos

fonteLiquidacoesEmpenhosCampos = "id, data, valor, especificacao, restoPagar,  entidade(id, nome), credorDevedor(nome), exercicio.ano, empenho(numero, recursoVinculo(valor,recurso(numero,descricao)), processoAdministrativo(numeroProcesso,anoProcesso))"
fonteLiquidacoesEmpenhosCriterio = "exercicio.ano = $paramExercicio and data >= $paramDataInicial and data <= $paramDataFinal" + criterioEntidade + criterioCredor
fonteLiquidacoesEmpenhosOrdenacao = "empenho.numero asc, data asc"

fonteLiquidacoesEmpenhos = fonteLiquidacoesEmpenhos.busca(campos:fonteLiquidacoesEmpenhosCampos, criterio:fonteLiquidacoesEmpenhosCriterio, ordenacao:fonteLiquidacoesEmpenhosOrdenacao)

percorrer(fonteLiquidacoesEmpenhos){ liqEmpenhos->

	// BUSCA DA ANULAÇÃO DA LIQUIDAÇÃO

	fonteLiquidacoesAnulacoes = Dados.contabilidade.v1.anulacoes.liquidacoesEmpenhos
	
	fonteLiquidacoesAnulacoesCampos = "id"
	fonteLiquidacoesAnulacoesCriterio = "liquidacao.id = $liqEmpenhos.id"
	
	anulado = false
	percorrer(fonteLiquidacoesAnulacoes.busca(campos:fonteLiquidacoesAnulacoesCampos, criterio: fonteLiquidacoesAnulacoesCriterio)){
		anulado = true
	}
	
	//Descarta caso liquidacao foi anulada
	if(anulado){
		continuar()
	}
	
	//BUSCA DOS PAGAMENTOS DA LIQUIDACAO
	
	fonteLiquidacoesPagamentos = Dados.contabilidade.v1.pagamentosEmpenhos
	
	fonteLiquidacoesPagamentosCampos = "id, valorTotalPagamento, valorTotalRetencao"
	fonteLiquidacoesPagamentosCriterio = "id = $liqEmpenhos.id"
	
	valorPago = 0
	percorrer(fonteLiquidacoesPagamentos.busca(campos:fonteLiquidacoesPagamentosCampos, criterio:fonteLiquidacoesPagamentosCriterio)){pagEmpenho->
		
		//BUSCA DAS ANULAÇÕES DO PAGAMENTO
		
		fonteAnulacaoPagamentoEmpenho = Dados.contabilidade.v1.anulacoes.pagamentosEmpenhos
		
		fonteAnulacaoPagamentoEmpenhoCampos = "id"
		fonteAnulacaoPagamentoEmpenhoCriterio = "pagamento.id = $pagEmpenho.id"
		
		pagAnulado = false
		percorrer(fonteAnulacaoPagamentoEmpenho.busca(campos:fonteAnulacaoPagamentoEmpenhoCampos, criterio: fonteAnulacaoPagamentoEmpenhoCriterio)){
			pagAnulado = true
		}
		
		if(!pagAnulado){
			valorPago += pagEmpenho.valorTotalPagamento + pagEmpenho.valorTotalRetencao
		}
		
	}'
	
	//Descarta caso liquidação foi paga na integra
	if(valorPago == liqEmpenhos.valor){
		continuar()
	}

	fonte.inserirLinha([
		principalId: liqEmpenhos.id,
		entidadeId: liqEmpenhos.entidade.id,
		entidadeNome: liqEmpenhos.entidade.nome,
		dataMov: liqEmpenhos.data,
		tipoDoc: tipoDoc,
		numeroDoc: numeroDoc,
		numeroEmpenho: liqEmpenhos.empenho.numero,
		numeroProcesso: liqEmpenhos.empenho.processoAdministrativo.numeroProcesso + "/" + liqEmpenhos.empenho.processoAdministrativo.anoProcesso,
		nomeCredor: liqEmpenhos.credorDevedor.nome,
		valorAPagar: liqEmpenhos.valor,
		valorPago: valorPago,
		valorRecurso: liqEmpenhos.empenho.recursoVinculo.valor,
		numeroRecurso: liqEmpenhos.empenho.recursoVinculo.recurso.numero,
		descricaoRecurso: liqEmpenhos.empenho.recursoVinculo.recurso.descricao
	]);

}

retornar fonte;


