// importando um componente
utilitarios = Scripts.utilitarios_contabil_cloud.importar();

//DEFININDO A ESTRUTURA DA FONTE DINAMICA, ESSES CAMPOS IRÃO COMPOR AS FIELDS DO JRXML
esquema = [
	principalId: Esquema.caracter,
	entidadeId: Esquema.caracter,
	entidadeNome: Esquema.caracter,
	dataMov: Esquema.data,
	tipoDoc: Esquema.caracter,
	numeroDoc: Esquema.caracter,
	numeroPagamento: Esquema.caracter,
	numeroEmpenho: Esquema.caracter,
	naturezaElemento: Esquema.caracter,
	numeroConta: Esquema.caracter,
	numeroProcesso: Esquema.caracter,
	nomeCredor: Esquema.caracter,
	valorBruto: Esquema.numero,
	valorAnulado: Esquema.numero,
	valorDesconto: Esquema.numero,
	valorPago: Esquema.numero,
	valorRecurso: Esquema.numero,
	numeroRecurso: Esquema.caracter,
	descricaoRecurso: Esquema.caracter
];

fonte = Dados.dinamico.v2.novo(esquema);

paramExercicio = parametros.exercicio.valor?:null
paramEntidade = parametros.entidades.valor?:null
paramDataInicial = parametros.dataInicial?.valor?:null
paramDataInicial = dataInicial.format("yyyy-MM-dd")
paramDataFinal = parametros.dataFinal?.valor?:null
//tipoDocumento = parametros.tipoDocumento.selecionado.valor?:nulo
//conta = parametros.conta.valor?:nulo
paramCredor = parametros.credor.valor?:null
paramComprovantes = parametros.comprovantes.selecionado.valor?:null
paramAnulacoes = parametros.anulacoes.selecionado.valor?:null
paramHistorico = parametros.historico.valor?:null

criterioEntidade = ""
if(paramEntidade){
	criterioEntidade = " and entidade.id in ($paramEntidade)"
}

if(dataFinal){
	paramDataFinal = dataFinal.format("yyyy-MM-dd")
} else {
	paramDataFinal = Datas.hoje().format("yyyy-MM-dd")
}

criterioCredor = ""
if(credor){
	criterioCredor = " and credor.id in ($paramCredor)"
}

parametrosCredores = [];
se(credor){
	credor = credor.dividir(~/,/)
	percorrer(credor){
		parametrosCredores << Integer.valueOf(item)
	}
}

// pegando os parametros orçamentários do exercicio
configuracoesOrcamentarias = utilitarios.configuracoesCloud(exercicio);

// pegando os ids das configurações do exercicio retornada pelo componente anterior
idRecurso = configuracoesOrcamentarias.find{item -> item.configuracao == "RECURSO"};

idNaturezaDespesa = configuracoesOrcamentarias.find{item -> item.configuracao == "NATUREZA_DESPESA"};

// pegando as formatações das mascaras de configurações do sistema
marcaraRecurso = utilitarios.formatacaoMascara(idRecurso);

mascaraNarureza = utilitarios.formatacaoMascara(idNaturezaDespesa);

// BUSCA DADOS DAS LIQUIDAÇÕES DOS EMPENHOS

fonteLiquidacoesEmpenhos = Dados.contabilidade.v1.liquidacoesEmpenhos

fonteLiquidacoesEmpenhosCampos = "id, data, valor, especificacao, restoPagar,  entidade(id), credorDevedor(nome), exercicio.ano, empenho(numero, recursoVinculo.recurso(numero,descricao), processoAdministrativo(numeroProcesso,anoProcesso))"
fonteLiquidacoesEmpenhosCriterio = "exercicio.ano = $paramExercicio and data >= $paramDataInicial and data <= $paramDataFinal" + criterioEntidade + criterioCredor
fonteLiquidacoesEmpenhosOrdenacao = "empenho.numero asc, data asc"

fonteLiquidacoesEmpenhos = fonteLiquidacoesEmpenhos.busca(campos:fonteLiquidacoesEmpenhosCampos, criterio:fonteLiquidacoesEmpenhosCriterio, ordenacao:fonteLiquidacoesEmpenhosOrdenacao)

percorrer(fonteLiquidacoesEmpenhos){ liqEmpenhos->

	// BUSCA DAS ANULACOES DE LIQUIDAÇÕES

	fonte.inserirLinha([
		principalId:principalId,
		entidadeId:entidadeId,
		entidadeNome:entidadeNome,
		dataMov:dataMov,
		tipoDoc:tipoDoc,
		numeroDoc:numeroDoc,
		numeroPagamento:numeroPagamento,
		numeroEmpenho:numeroEmpenho,
		naturezaElemento:naturezaElemento,
		numeroConta:numeroConta,
		numeroProcesso:numeroProcesso,
		nomeCredor:nomeCredor,
		valorBruto:valorBruto,
		valorAnulado:valorAnuladoPago,
		valorDesconto:valorDesconto,
		valorPago:valorPago,
		valorRecurso: 0,
		numeroRecurso:numeroRecurso,
		descricaoRecurso:descricaoRecurso
	]);

}

retornar fonte;


