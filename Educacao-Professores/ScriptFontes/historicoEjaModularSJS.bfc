utils = importar "utilitarios"

paramAluno = parametros.aluno.valor
paramEscola = parametros.escola.valor
paramNivel = parametros.nivel.valor
paramTurma = parametros.turma.valor
paramAdmin = parametros.admin.valor
paramCoord = parametros.coord.valor

esquema = [
	nomeEstabelecimento: Esquema.caracter,
	dadosEstabelecimento: Esquema.caracter,
	aluno: Esquema.caracter,
	aluId: Esquema.inteiro,
	dataNascimento: Esquema.data,
	alunoDocumento: Esquema.caracter,
	pai: Esquema.caracter,
	mae: Esquema.caracter,
	cidadeNascimento: Esquema.caracter,
	ufNascimento: Esquema.caracter,
	nacionalidade: Esquema.caracter,
	anoConclusao: Esquema.inteiro,
	nivel: Esquema.caracter,
	registro: Esquema.objeto([
		disciplina: Esquema.caracter,
		ano: Esquema.inteiro,
		nota: Esquema.inteiro,
		cargaHoraria: Esquema.inteiro,
		percFrequencia: Esquema.inteiro,
		situacao: Esquema.caracter
	]),
	observacao: Esquema.caracter,
	diretor: Esquema.caracter,
	diretorMatricula: Esquema.caracter,
	coordenador: Esquema.caracter,
	coordenadorMatricula: Esquema.caracter,
	administrativo: Esquema.caracter,
	administrativoMatricula: Esquema.caracter,
	cursando: Esquema.caracter
]


estNome = ""
estDados = ""
aluNome = ""
aluPai = ""
aluMae = ""
aluCidNasc = ""
aluUFNasc = ""
aluPaisNasc = ""
aluId = 0
registro = []
existe = 0
aluDataNasc = Datas.hoje()
anoConc = 0
disc = ""
discPadrao = ""
percFreq = 0
registroAval = []
historico = []
matricula = []
filiacao = []
listaAlunos = "("
arrayAlunos = []
situacao = ""
alunoDocumento = ""
obs = ""
diretor = ""
diretorMatricula = ""
coordenador = ""
coordenadorMatricula = ""
administrativo = ""
administrativoMatricula = ""
cursando = "N"
ultimo = 0


se(paramNivel == 1){
	nivelEsc = "ENSINO_MEDIO"
} senao {
	nivelEsc = "ENSINO_FUNDAMENTAL"
}

imprimir paramNivel + " | " + nivelEsc

fonte = Dados.dinamico.v2.novo(esquema)

fonteRegAval =  Dados.educacao.v1."registro-avaliacao"
//fonteHistorico = Dados.educacao.v1.historicoEscolar
fonteHistoricoItem = Dados.educacao.v1.itemHistoricoEscolar
fonteHistoricoMatricula = Dados.educacao.v1.itemHistoricoEscolarMatricula
fonteFiliacao = Dados.educacao.v1.alunoFiliacao
fonteEstabelecimento = Dados.educacao.v1.estabelecimento
fonteResultadoFrequencia = Dados.educacao.v1."resultado-frequencia"
fonteAlunos = Dados.educacao.v1.alunos
fonteEnturmacao = Dados.educacao.v1.enturmacao
fonteEnturmacaoItemEducacional = Dados.educacao.v1.enturmacaoItemEducacional
fonteEquipeDir = Dados.educacao.v1.equipeDiretiva
fonteTurmaDisc = Dados.educacao.v1.turmaDisciplina


/* -- Equipe diretiva -- */

percorrer(fonteEquipeDir.lista(campos:"id,funcionario.servidor.pessoa.nome, funcionario.matricula, funcionario.cargo.descricao, funcionario.cargoComissionado.descricao", criterio:"estabelecimento.id = ${paramEscola}")){eqpDir->

	se(eqpDir.funcionario.cargo.descricao == "DIRETOR ESCOLAR" || eqpDir.funcionario.cargoComissionado.descricao == "DIRETOR ESCOLAR"){
		diretor = eqpDir.funcionario.servidor.pessoa.nome
		diretorMatricula = eqpDir.funcionario.matricula
	}
	se(eqpDir.id == paramCoord){
		coordenador = eqpDir.funcionario.servidor.pessoa.nome
		coordenadorMatricula = eqpDir.funcionario.matricula
	}
	se(eqpDir.id == paramAdmin){
		administrativo = eqpDir.funcionario.servidor.pessoa.nome
		administrativoMatricula = eqpDir.funcionario.matricula
	}

}

/* -- Estabelecimento -- */

percorrer(fonteEstabelecimento.endereco(campos:"estabEndereco.estabelecimento.pessoa.nome, estabEndereco.estabelecimento.pessoa.telefone, estabEndereco.endereco.logradouro, estabEndereco.endereco.cep, estabEndereco.endereco.numero, estabEndereco.endereco.complemento, estabEndereco.endereco.bairro, estabEndereco.endereco.municipio.nome, estabEndereco.endereco.municipio.uf, estabEndereco.estabelecimento.pessoa.site, estabEndereco.estabelecimento.pessoa.email", criterio:"estabEndereco.endereco.principal = true and estabEndereco.estabelecimento.id = " + paramEscola)){est->

	estNome = est.estabEndereco.estabelecimento.pessoa.nome
	estDados = "EndereÃ§o: " + est.estabEndereco.endereco.logradouro + " " + est.estabEndereco.endereco.numero + " " + est.estabEndereco.endereco.complemento + " " + est.estabEndereco.endereco.bairro + " " + est.estabEndereco.endereco.municipio.nome + " " + est.estabEndereco.endereco.municipio.uf + " " + est.estabEndereco.endereco.cep + "\n" + "Site: " + est.estabEndereco.estabelecimento.pessoa.site + " | Email: " + est.estabEndereco.estabelecimento.pessoa.email

}


//preparacao fontes

if(paramAluno != nulo){
	percorrer(fonteAlunos.lista(campos:"pessoa.nome, id, pessoa.fisica.dataNascimento, pessoa.fisica.municipioNascimento.nome, pessoa.fisica.municipioNascimento.uf, pessoa.fisica.nacionalidade, pessoa.fisica.cpf, pessoa.fisica.rg", criterio:"id = ${paramAluno}", ordenacao:"id asc")){alunos->

		listaAlunos = listaAlunos + alunos.id + ","
		arrayAlunos << alunos
		imprimir "Aluno: " + alunos.pessoa.nome

	}
} else {
	
	crit = "estabelecimento.id = ${paramEscola}"
	if(paramTurma != nulo){
		crit = crit + " and turma.id = ${paramTurma}"
	}
	percorrer(fonteEnturmacao.lista(campos:"matricula.aluno.pessoa.nome, matricula.aluno.id, matricula.aluno.pessoa.fisica.dataNascimento, matricula.aluno.pessoa.fisica.municipioNascimento.nome, matricula.aluno.pessoa.fisica.municipioNascimento.uf, matricula.aluno.pessoa.fisica.nacionalidade, matricula.aluno.pessoa.fisica.cpf, matricula.aluno.pessoa.fisica.rg, matricula.situacao,id", criterio:crit, ordenacao:"matricula.aluno.id asc")){enturma->

		se(enturma.matricula.aluno.id != ultimo){
			listaAlunos = listaAlunos + enturma.matricula.aluno.id + ","
			arrayAlunos << enturma.matricula.aluno
		}
		ultimo = enturma.matricula.aluno.id
		
		imprimir "Aluno: " + enturma.matricula.aluno.pessoa.nome

	}
}

listaAlunos = listaAlunos + "0)"


imprimir "CritItem: notaNumerica is not null and historicoEscolar.aluno.id in ${listaAlunos}"
percorrer(fonteHistoricoItem.lista(campos:"historicoEscolar.aluno.id, historicoEscolar.anoLetivo, itemOrganizacaoCurricular.descricao, eixoTematico.descricao, notaNumerica, cargaHoraria, percentualFrequencia, situacao, historicoEscolar.situacao, historicoEscolar.nivelEscolar, historicoEscolar.observacao", criterio:"notaNumerica is not null and historicoEscolar.aluno.id in ${listaAlunos}", ordenacao:"historicoEscolar.aluno.pessoa.nome asc, historicoEscolar.anoLetivo asc")){

	historico << item

}

imprimir "CritMat: matricula.aluno.id in ${listaAlunos} and notaNumerica is not null"
percorrer(fonteHistoricoMatricula.lista(campos:"matricula.aluno.id, matricula.anoLetivo.ano, etapa.disciplina.descricao, notaNumerica, cargaHoraria, resultadoFrequencia.percentualTotal, matricula.situacaoMatricula, matricula.etapaMatriz.matriz.curso.nivelEscolar, matricula.observacao", criterio:"matricula.aluno.id in ${listaAlunos} and notaNumerica is not null", ordenacao:"matricula.aluno.pessoa.nome asc, matricula.anoLetivo.ano asc")){

	matricula << item

}

imprimir "CritReg: enturmacao.matricula.aluno.id in ${listaAlunos}"
percorrer(fonteRegAval.lista(campos:"enturmacao.matricula.aluno.id, enturmacao.matricula.situacao, enturmacao.turma.id, notaNumerica, itemAvaliacaoTurma.itemEducacional.descricao, itemAvaliacaoTurma.tipoPeriodo, itemAvaliacaoTurma.itemEducacional.pai.descricao, enturmacao.turma.etapaMatriz.matriz.curso.nivelEscolar, anoLetivo.ano, enturmacao.matricula.observacao, itemAvaliacaoTurma.itemEducacional.id", criterio: "enturmacao.matricula.aluno.id in ${listaAlunos}", ordenacao: "enturmacao.matricula.aluno.pessoa.nome asc, anoLetivo.ano asc, enturmacao.turma.etapaMatriz.matriz.descricao desc, enturmacao.turma.descricao asc, itemAvaliacaoTurma.itemEducacional.descricao asc")){

	registroAval << item

}

percorrer(fonteFiliacao.lista(campos:"aluno.id, filiacao.pessoa.nome, tipo", criterio:"aluno.id in ${listaAlunos}")){

	filiacao << item

}

//PERCORRER ALUNO

percorrer(arrayAlunos){alu->

	/* -- Dados aluno -- */
	aluNome = alu.pessoa.nome
	aluDataNasc = alu.pessoa.fisica.dataNascimento
	aluCidNasc = alu.pessoa.fisica.municipioNascimento.nome
	aluUFNasc = alu.pessoa.fisica.municipioNascimento.uf
	aluPaisNasc = alu.pessoa.fisica.nacionalidade
	aluId = alu.id
	
	imprimir alu.pessoa.fisica.cpf + " | " + alu.pessoa.fisica.rg
	
	
	alunoDocumento = ""
	
	se(!(alu.pessoa.fisica.cpf == nulo || alu.pessoa.fisica.cpf == "")){ 
		alunoDocumento = ", portador do CPF: " + (utils.formataCpfCnpj("FISICA",alu.pessoa.fisica.cpf))
	} senao {
		se(!(alu.pessoa.fisica.rg == nulo || alu.pessoa.fisica.rg == "")){
			alunoDocumento = ", portador do RG: " + alu.pessoa.fisica.rg
		}
	}
	
	/* -- Filiacao -- */

	percorrer(filiacao){fili->
	
		se(fili.aluno.id == alu.id){
		
			imprimir fili.filiacao.pessoa.nome + " | " + fili.tipo
			
			se(fili.tipo == "PAI"){
				aluPai = fili.filiacao.pessoa.nome
			} senao {
				se(fili.tipo == "MAE"){
					aluMae = fili.filiacao.pessoa.nome
				}
			}
		
		}
		
	}



	/*	Notas dos itens do historico */

	percorrer(historico){itemHist->

		discPadrao = itemHist.itemOrganizacaoCurricular.descricao
		se(itemHist.itemOrganizacaoCurricular.descricao == nulo){
			discPadrao = itemHist.eixoTematico.descricao
		}

		//imprimir "ITEM-> DisciplinaOC: " + itemHist.itemOrganizacaoCurricular.descricao + " | DisciplinaET: " + itemHist.eixoTematico.descricao + " | Ano: " + itemHist.historicoEscolar.anoLetivo + " | CH: " + (itemHist.cargaHoraria/3600) + " | Nota: " + itemHist.notaNumerica * 10 + " | %Fre: " + itemHist.percentualFrequencia + " | Situacao: " + itemHist.historicoEscolar.situacao + " | Tipo: " + itemHist.tipoItemOrganizacaoCurricular + " | Naturalidade: " + aluCidNasc + ", " + aluUFNasc + ", " + aluPaisNasc + " | Nivel: " + itemHist.historicoEscolar.nivelEscolar

		se(itemHist.historicoEscolar.aluno.id == alu.id && itemHist.historicoEscolar.nivelEscolar == nivelEsc){
		
		
			discPadrao = utils.padronizaMatriculaSJS(itemHist.itemOrganizacaoCurricular.descricao)
			
			sit = itemHist.historicoEscolar.situacao
			se(sit == nulo){
				sit = itemHist.situacao
			}
	
			imprimir "ITEM-> Disciplina: " + discPadrao + " | Ano: " + itemHist.historicoEscolar.anoLetivo + " | CH: " + (itemHist.cargaHoraria/3600) + " | Nota: " + itemHist.notaNumerica * 10 + " | %Fre: " + itemHist.percentualFrequencia + " | Situacao: " + sit + " | Tipo: " + itemHist.tipoItemOrganizacaoCurricular + " | Naturalidade: " + aluCidNasc + ", " + aluUFNasc + ", " + aluPaisNasc + " | Nivel: " + itemHist.historicoEscolar.nivelEscolar
			
			se(!obs.contains(itemHist.historicoEscolar.observacao)){
				obs = obs + itemHist.historicoEscolar.observacao + "\n"
			}
			
			switch(sit){
			
			case "APROVADO":
				situacao = "AP"
				break
			case "APROVADO_PARCIAL":
				situacao = "PA"
				break
			case "REPROVADO":
				situacao = "RE"
				break
			case "REPROVADO_FREQUENCIA":
				situacao = "RF"
				break
			case "DEIXOU_FREQUENTAR":
				situacao = "DE"
				break
			default:
				situacao = "OT"
			
			}
			
			percorrer(registro){reg->
				se(reg.disciplina == discPadrao){
					se(reg.ano < itemHist.historicoEscolar.anoLetivo || (reg.ano == itemHist.historicoEscolar.anoLetivo && reg.nota < itemHist.notaNumerica)){
						registro[indice] = [
							disciplina:discPadrao,
							ano:itemHist.historicoEscolar.anoLetivo,
							nota:itemHist.notaNumerica,
							cargaHoraria:itemHist.cargaHoraria/3600,
							percFrequencia:itemHist.percentualFrequencia,
							situacao:situacao
						]
					}
					existe = 1
					parar()
					
				}
			}
			
			se(existe == 0){
				registro << [
					disciplina:discPadrao,
					ano:itemHist.historicoEscolar.anoLetivo,
					nota:itemHist.notaNumerica,
					cargaHoraria:itemHist.cargaHoraria/3600,
					percFrequencia:itemHist.percentualFrequencia,
					situacao:situacao
				]
			}
			
			se(anoConc < itemHist.historicoEscolar.anoLetivo){
				anoConc = itemHist.historicoEscolar.anoLetivo
			}
			
			existe = 0
			discPadrao = ""
		}
		
	}

	/*	notas da matricula  */

	percorrer(matricula){matHist->
	
		se(matHist.matricula.aluno.id == alu.id && matHist.matricula.etapaMatriz.matriz.curso.nivelEscolar == nivelEsc){

			//imprimir "MATR-> Disciplina: " + matHist.etapa.disciplina.descricao + " | DisciplinaInep: " + matHist.etapa.disciplina.disciplinaInep.descricao + " | Ano: " + matHist.matricula.anoLetivo.ano + " | CH: " + (matHist.cargaHoraria/3600) + " | Nota: " + matHist.notaNumerica * 10 + " | %Fre: " + matHist.resultadoFrequencia.percentualTotal + " | Situacao: " + matHist.matricula.situacaoMatricula + " | Naturalidade: " + aluCidNasc + ", " + aluUFNasc + ", " + aluPaisNasc + " | Nivel:" + matHist.matricula.etapaMatriz.matriz.curso.nivelEscolar
			
			discPadrao = utils.padronizaMatriculaSJS(matHist.etapa.disciplina.descricao)
			
			se(!obs.contains(matHist.matricula.observacao)){
				obs = obs + matHist.matricula.observacao + "\n"
			}
			
			switch(matHist.matricula.situacaoMatricula){
			
			case "APROVADO":
				situacao = "AP"
				break
			case "APROVADO_PARCIAL":
				situacao = "PA"
				break
			case "REPROVADO":
				situacao = "RE"
				break
			case "REPROVADO_FREQUENCIA":
				situacao = "RF"
				break
			case "DEIXOU_FREQUENTAR":
				situacao = "DE"
				break
			default:
				situacao = "OT"
			
			}
			
			percorrer(registro){reg->
				se(reg.disciplina == discPadrao){
					se(reg.ano < matHist.matricula.anoLetivo.ano || (reg.ano == matHist.matricula.anoLetivo.ano && reg.nota < matHist.notaNumerica)){
						registro[indice] = [
							disciplina:discPadrao,
							ano:matHist.matricula.anoLetivo.ano,
							nota:matHist.notaNumerica,
							cargaHoraria:matHist.cargaHoraria/3600,
							percFrequencia:matHist.resultadoFrequencia.percentualTotal,
							situacao:situacao
						]
					}
					existe = 1
					parar()
				}
			}
			
			se(existe == 0){
				registro << [
					disciplina:discPadrao,
					ano:matHist.matricula.anoLetivo.ano,
					nota:matHist.notaNumerica,
					cargaHoraria:matHist.cargaHoraria/3600,
					percFrequencia:matHist.resultadoFrequencia.percentualTotal,
					situacao:situacao
				]
			}
			
			
			se(anoConc < matHist.matricula.anoLetivo.ano){
				anoConc = matHist.matricula.anoLetivo.ano
				
			}

			existe = 0
			discPadrao = ""
		
		}
	}

	/*	notas dos registros de avaliacao  */

	percorrer(registroAval){regAval->

		se(regAval.enturmacao.turma.etapaMatriz.matriz.curso.nivelEscolar == nivelEsc && regAval.enturmacao.matricula.aluno.id == alu.id && regAval.enturmacao.matricula.situacao != "CANCELAMENTO"){

			se(regAval.itemAvaliacaoTurma.tipoPeriodo == "MÃ©dia final" || regAval.itemAvaliacaoTurma.tipoPeriodo == "MÃ³dulo" || regAval.itemAvaliacaoTurma.tipoPeriodo == "Conselho de classe"){
			
				percorrer(fonteResultadoFrequencia.lista(campos:"percentualTotal",criterio:"enturmacao.matricula.aluno.id = " + regAval.enturmacao.matricula.aluno.id + " and enturmacao.turma.id = " + regAval.enturmacao.turma.id + " and anoLetivo.ano = " + regAval.anoLetivo.ano)){freq->
				
					//imprimir "Aluno ID : " + regAval.enturmacao.matricula.aluno.id + " | Turma ID : " + regAval.enturmacao.turma.id
					se(freq.percentualTotal != nulo){
						percFreq = freq.percentualTotal
					}
				
				}
				
				disc = regAval.itemAvaliacaoTurma.itemEducacional.descricao
				se (disc.tamanho() < 2){
					disc = regAval.itemAvaliacaoTurma.itemEducacional.pai.descricao
				}
			
				//imprimir "AVAL-> Disciplina: " + disc + " | Ano: " + regAval.anoLetivo.ano + " | CH: - | Nota: " + regAval.notaNumerica * 10 + " | %Fre: - | Situacao: " + regAval.enturmacao.matricula.situacao + " | Tipo: " + regAval.itemAvaliacaoTurma.tipoPeriodo + " | Naturalidade: " + aluCidNasc + ", " + aluUFNasc + ", " + aluPaisNasc + " | Nivel: " + (regAval.enturmacao.turma.etapaMatriz.matriz.curso.nivelEscolar == nivelEsc)
				
				discPadrao = utils.padronizaMatriculaSJS(disc)
				
				se(!obs.contains(regAval.enturmacao.matricula.observacao)){
					obs = obs + regAval.enturmacao.matricula.observacao + "\n"
				}
				
				switch(regAval.enturmacao.matricula.situacao){
			
					case "APROVADO":
						situacao = "AP"
						break
					case "CURSANDO":
						situacao = "CR"
						cursando = "C"
						break
					case "DISPENSADO":
						situacao = "DS"
						break
					case "REPROVADO_FREQUENCIA":
						situacao = "RF"
						break
					case "REPROVADO":
						situacao = "RP"
						break
					case "DEIXOU_FREQUENTAR":
						situacao = "DE"
						break
					case "TRANSFERIDO":
						situacao = "TR"
						break
					case "APROVADO_CONSELHO":
						situacao = "AC"
						break
					default:
						situacao = "OT"
				}
				
				cargaHorariaDisc = 80
				percorrer(fonteTurmaDisc.lista(campos:"etapaMatrizDisciplina.disciplina.id, etapaMatrizDisciplina.cargaHoraria", criterio:"itemEducacional.id = ${regAval.itemAvaliacaoTurma.itemEducacional.id}")){turmDisc->
					cargaHorariaDisc = turmDisc.etapaMatrizDisciplina.cargaHoraria/3600
					imprimir "CH" + cargaHorariaDisc
				}

				percorrer(registro){reg->
					se(reg.disciplina == discPadrao){
						se(reg.ano < regAval.anoLetivo.ano || (reg.ano == regAval.anoLetivo.ano && reg.nota < regAval.notaNumerica || situacao == "CR")){
							registro[indice] = [
								disciplina:discPadrao,
								ano:regAval.anoLetivo.ano,
								nota:regAval.notaNumerica,
								cargaHoraria:reg.cargaHoraria,
								percFrequencia:percFreq,
								situacao: situacao
							]
						}
						existe = 1
						parar()
					}
				}

				se(existe == 0){
					registro << [
						disciplina:discPadrao,
						ano:regAval.anoLetivo.ano,
						nota:regAval.notaNumerica,
						cargaHoraria:cargaHorariaDisc,
						percFrequencia:percFreq,
						situacao:situacao
					]
				}

				se(anoConc < regAval.anoLetivo.ano){
					anoConc = regAval.anoLetivo.ano
				}

				existe = 0
				discPadrao = ""
				percFreq = 0
			}
		}
	}
	
	/*	matriculas situacao cursando  */
	
	percorrer(fonteEnturmacaoItemEducacional.lista(campos:"enturmacao.matricula.situacao, itemEducacional.descricao, itemEducacional.pai.descricao, enturmacao.anoLetivo.ano", criterio:"enturmacao.id = ${alu.id}")){entSit->
	
		se(entSit.enturmacao.anoLetivo.ano == Datas.ano(Datas.hoje()) && entSit.enturmacao.matricula.situacao == "CURSANDO"){
			
			disc = entSit.itemEducacional.descricao
			se (disc.tamanho() < 2){
				disc = entSit.itemEducacional.pai.descricao
			}
			
			discPadrao = utils.padronizaMatriculaSJS(disc)
		
			percorrer(registro){reg->
				se(reg.disciplina == discPadrao){
					registro[indice] = [
						disciplina:discPadrao,
						ano: Datas.ano(Datas.hoje()),
						nota: 0,
						cargaHoraria: 0,
						percFrequencia: 0,
						situacao: "CR"
					]
					existe = 1
					parar()
				}
			}

			se(existe == 0){
				registro << [
					disciplina:discPadrao,
					ano: Datas.ano(Datas.hoje()),
					nota: 0,
					cargaHoraria: 0,
					percFrequencia: 0,
					situacao: "CR"
				]
			}
			
			imprimir "CURS-> IN Disc: " + discPadrao
			
			cursando = "C"
		}
		
		imprimir "CURS-> OUT Disc: " + discPadrao + " | SIT: " + entSit.enturmacao.matricula.situacao + " | ANO: " + Datas.ano(Datas.hoje())
		existe = 0
	
	}

	/*	insercao na fonte  */
	
	nota = 0

	percorrer(registro){reg->

		ch = reg.cargaHoraria
	/*
		se(ch == nulo || ch == 0){
			ch = 80
		}
	*/
	
		pf = Numeros.trunca(reg.percFrequencia,0)
		se(pf == nulo || pf == 0){
			pf = 100
		}
		
		imprimir reg // apenas verificacao
		
		se(reg.nota <= 10){
			nota = reg.nota * 1000
		} senao {
			nota = reg.nota * 100
		}
		
		nota = Numeros.trunca(nota,0)
		
		sit = reg.situacao
		imprimir "" + ch + " / " + pf + " / " + nivelEsc + " / " + nota + " / " + sit
		se(nota < 7000 && reg.situacao == "AP"){
			sit = "AC"
		}
		
		fonte.inserirLinha(
			nomeEstabelecimento: estNome,
			dadosEstabelecimento: estDados,
			aluno: aluNome,
			aluId: aluId,
			dataNascimento: aluDataNasc,
			alunoDocumento: alunoDocumento,
			pai: aluPai,
			mae: aluMae,
			cidadeNascimento: aluCidNasc,
			ufNascimento: aluUFNasc,
			nacionalidade: aluPaisNasc,
			anoConclusao: anoConc,
			nivel: nivelEsc,
			registro: ([
				disciplina: reg.disciplina,
				ano: reg.ano,
				nota: nota,
				cargaHoraria: ch,
				percFrequencia: pf,
				situacao:sit
			]),
			observacao: obs,
			diretor: diretor,
			diretorMatricula: diretorMatricula,
			coordenador: coordenador,
			coordenadorMatricula: coordenadorMatricula,
			administrativo: administrativo,
			administrativoMatricula: administrativoMatricula,
			cursando: cursando
		)
		
	}
	
	cursando = "N"
	obs = ""

}

/*
fonte.inserirLinha(
	aluno:aluNome,
	mapaRegistro:registro
)
*/

retornar fonte