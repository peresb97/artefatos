paramAno = parametros.anoLetivo.valor
paramEstabelecimento = parametros.estabelecimento.valor
paramFuncionario = parametros.funcionario.valor
paramTurma = parametros.turma.valor
paramPeriodo = parametros.periodo.valor
paramAdmin = parametros.admin.valor
paramCoord = parametros.coord.valor

esquema = [
		turma                  : Esquema.caracter,
		disciplina             : Esquema.caracter,
		periodo                : Esquema.caracter,
		nomeAluno              : Esquema.caracter,
		dataAula               : Esquema.data,
		numeroAula             : Esquema.inteiro,
		dataENumero            : Esquema.caracter,
		presenca               : Esquema.caracter,
		estabelecimentoNome    : Esquema.caracter,
		estabelecimentoTelefone: Esquema.caracter,
		estabelecimentoSite    : Esquema.caracter,
		professor              : Esquema.caracter,
		professorMatricula     : Esquema.caracter,
		aulaMes                : Esquema.caracter,
		aulaDia                : Esquema.inteiro,
		dataInicio             : Esquema.data,
		dataFim                : Esquema.data,
		turno                  : Esquema.caracter,
		curso                  : Esquema.caracter,
		diretor                : Esquema.caracter,
		diretorMatricula       : Esquema.caracter,
		coordenador            : Esquema.caracter,
		coordenadorMatricula   : Esquema.caracter,
		administrativo         : Esquema.caracter,
		administrativoMatricula: Esquema.caracter
]

fonte = Dados.dinamico.v2.novo(esquema)

//fontes
fonteAlocaAula = Dados.profesores.v1.alocacaoAula
fonteRegistroPresenca = Dados.profesores.v1.FaltasAulas
fonteFuncionario = Dados.profesores.v1.funcionario.lista(campos: "servidor.id, matricula", criterio: "id = ${paramFuncionario}")
fonteEnturmacao = Dados.profesores.v1.enturmacao
fonteEnturmacaoItemEd = Dados.profesores.v1.enturmacaoItemEducacional
fonteEquipeDir = Dados.profesores.v1.equipeDiretiva

//variaveis
presencas = []
alunos = []
totalFaltas = []
mapaEntItemEd = []
listTurma = []
servidorID = fonteFuncionario[0].servidor.id
professorMatricula = fonteFuncionario[0].matricula
professor = fonteFuncionario[0].servidor.pessoa.nome
formatData = ""
tFaltas = 0
diretor = ""
diretorMatricula = ""
coordenador = ""
coordenadorMatricula = ""
administrativo = ""
administrativoMatricula = ""
nomeEData = ""
turID = ""
critTurma = ""
critFal = ""
periodo = ""
entItemEd = 0
critEnt = ""
eja = false
listaTurma = ""
listaItemEd = ""

imprimir "Inicio "+ Datas.hoje().formatar('yyyy-MM-dd HH:mm:ss.SSS')

//Preparação dos filtros
fonteEnturmaFuncionario = Dados.profesores.v1.EnturmacaoFuncionario.lista(campos: "turma.id, turma.modalidadeTurma, itemEducacional.pai.descricao, itemEducacional.pai.id, itemEducacional.id, itemEducacional.descricao", criterio: "professor.id = ${paramFuncionario} and anoLetivo.ano = ${paramAno} and estabelecimento.id = ${paramEstabelecimento}", ordenacao:"turma.id asc")

criterioFaltas = "estabelecimento.id = ${paramEstabelecimento} and anoLetivo.ano = ${paramAno}"
crit = "estabelecimento.id = ${paramEstabelecimento} and anoLetivo.ano = ${paramAno}"

if(paramPeriodo != nulo && paramPeriodo != "1%An%") {
	crit += " and periodoAvaliativo.descricao like '${paramPeriodo}'" /* and itemEducacional.id = ${paramDisciplina}*/
	criterioFaltas += " and periodoAvaliativo.descricao like '${paramPeriodo}'"
	/*  and itemEducacional.id = ${paramDisciplina}*/
} else if(paramPeriodo == "1%An%"){
	crit += " and periodoAvaliativo.descricao is null" /*  and itemEducacional.id = ${paramDisciplina}*/
	criterioFaltas += " and periodoAvaliativo.descricao is null"
}

se(paramTurma != nulo) {
	fonteTurmaFuncionario = Dados.profesores.v1.EnturmacaoFuncionario.lista(campos: "turma.id, turma.modalidadeTurma", criterio: "turma.id = ${paramTurma}")
	turID = fonteTurmaFuncionario[0].turma.id
	if(fonteTurmaFuncionario[0].turma.modalidadeTurma == "EJA"){
		eja = true
	}
	listTurma.add(turID)
} senao {
//	crit += " and servidor.id = ${servidorID}"
	ultimo = 0
	separador = ""
	percorrer(fonteEnturmaFuncionario) { turFunc ->
//		listaTurma += separador + turFunc.turma.id
		if(ultimo != turFunc.turma.id){
			listTurma.add(turFunc.turma.id)
			if(turFunc.turma.modalidadeTurma == "EJA"){
				listaItemEd += separador + turFunc.itemEducacional.id
				eja = true
//				imprimir "EntFunc: " + turFunc
				separador = ","
			}
		}
		ultimo = turFunc.turma.id
	}
	critEnt = " and itemEducacional.id in (${listaItemEd})"
//	critFal += " and alocacaoAula.servidor.id = ${servidorID}"
}

criterioFaltas += critFal

imprimir 'fim turma funcionarios '+ Datas.hoje().formatar('yyyy-MM-dd HH:mm:ss.SSS')
imprimir 'criterio ' + crit
imprimir 'criterioFaltas ' + criterioFaltas

// equipe diretiva
percorrer(fonteEquipeDir.lista(campos: "id,funcionario.servidor.pessoa.nome, funcionario.matricula, funcionario.cargo.descricao, funcionario.cargoComissionado.descricao",
		criterio: "estabelecimento.id = ${paramEstabelecimento}")) { eqpDir ->

	se(eqpDir.funcionario.cargo.descricao == "DIRETOR ESCOLAR" || eqpDir.funcionario.cargoComissionado.descricao == "DIRETOR ESCOLAR") {
		diretor = eqpDir.funcionario.servidor.pessoa.nome
		diretorMatricula = eqpDir.funcionario.matricula
	}
	se(eqpDir.id == paramCoord) {
		coordenador = eqpDir.funcionario.servidor.pessoa.nome
		coordenadorMatricula = eqpDir.funcionario.matricula
	}
	se(eqpDir.id == paramAdmin) {
		administrativo = eqpDir.funcionario.servidor.pessoa.nome
		administrativoMatricula = eqpDir.funcionario.matricula
	}

}

imprimir 'fim equipes diretivas '+ Datas.hoje().formatar('yyyy-MM-dd HH:mm:ss.SSS')

//POR TURMA
percorrer(listTurma){listT->

	turmaFiltro = listT

	aulas = fonteAlocaAula.listar(campos: "id, data, numero, turma.descricao, itemEducacional.descricao, itemEducacional.pai.descricao, periodoAvaliativo.descricao, periodoAvaliativo.id, estabelecimento.pessoa.nome, estabelecimento.pessoa.telefone, estabelecimento.pessoa.site, anoLetivo.ano, servidor.pessoa.nome, periodoAvaliativo.dataInicial, periodoAvaliativo.dataFinal, turma.turno, turma.etapaMatriz.matriz.curso.descricao, turma.id, itemEducacional.id, itemEducacional.pai.id",
			criterio: crit + " and turma.id = ${turmaFiltro} and servidor.id = ${servidorID}",
			ordenacao: "turma.id asc, itemEducacional.id asc, servidor.pessoa.nome, periodoAvaliativo.dataInicial asc, data asc")

	imprimir 'fim alocaoes de aula '+ Datas.hoje().formatar('yyyy-MM-dd HH:mm:ss.SSS')

	//percorrer essa fonte para pegar todas as aulas da disciplina
	alunos = []
	enturmacoes = fonteEnturmacao.lista(campos: "id, turma.modalidadeTurma, matricula.aluno.id, matricula.aluno.pessoa.nome, dataInicio, dataFim, turma.id, matricula.situacao", criterio:
			"estabelecimento.id = ${paramEstabelecimento} and turma.id = ${turmaFiltro} and anoLetivo.ano = ${paramAno}", ordenacao: "turma.id asc, matricula.aluno.pessoa.nome asc")

	percorrer(enturmacoes){ enturma ->
		se(!(enturma.dataFim.ano() > 1900 && enturma.matricula.situacao == "CURSANDO") && enturma.matricula.situacao != "CANCELAMENTO"){
			alunos << enturma
		}
	}

	if(eja){
		mapaEntItemEd = []
		percorrer(fonteEnturmacaoItemEd.lista(campos:"enturmacao.id, itemEducacional.descricao, itemEducacional.pai.descricao, enturmacao.turma.descricao", criterio:"enturmacao.turma.id = ${turmaFiltro} ${critEnt}")){entEd->
			imprimir "ent: " + entEd
			mapaEntItemEd << [ent:entEd.enturmacao.id, edu:entEd.itemEducacional.id]
		}
	}

	imprimir 'fim enturmacoes'+ Datas.hoje().formatar('yyyy-MM-dd HH:mm:ss.SSS')
	//TODO VER PARA COLOCAR NO FILTRO DA FONTE
	//alunos.removeif {enturma -> !(enturma.dataFim.ano() > 1900 && enturma.matricula.situacao == "CURSANDO")}


	imprimir 'fim filtro enturmacao'+ Datas.hoje().formatar('yyyy-MM-dd HH:mm:ss.SSS')

	faltas = fonteRegistroPresenca.lista(campos: "enturmacao.id, alocacaoAula.id, alocacaoAula.data , alocacaoAula.periodoAvaliativo.id, enturmacao.matricula.aluno.id, enturmacao.turma.id, itemEducacional.id", criterio: criterioFaltas + " and enturmacao.turma.id = ${turmaFiltro} and alocacaoAula.servidor.id = ${servidorID}", ordenacao: "alocacaoAula.id asc")


	imprimir 'fim faltas '+ Datas.hoje().formatar('yyyy-MM-dd HH:mm:ss.SSS')

	// mapa para contagem de faltas
	existe = false
	presencas = []
	totalFaltas = []
	percorrer(faltas) { regPres ->
	
		//imprimir "" + regPres.enturmacao.dataFim + " | " + regPres.enturmacao.dataFim.ano()
		se(regPres.enturmacao.dataFim.ano() == 1800) {
			presencas << regPres

			percorrer(totalFaltas) { tf ->
				se(tf.alunoId == regPres.enturmacao.id && regPres.alocacaoAula.periodoAvaliativo.id == tf.periodoId && regPres.itemEducacional.id == tf.discId) {
					totalFaltas[indice].faltas++
					// totalFaltas[indice] = [
							// alunoId  : tf.alunoId,
							// turmaId  : tf.turmaId,
							// periodoId: tf.periodoId,
							// discId   : tf.discId,
							// faltas   : (tf.faltas + 1)
					// ]
					parar()
					existe = true
				}
			}

			se(!existe) {
				totalFaltas << [
						alunoId  : regPres.enturmacao.id,
						turmaId  : regPres.enturmacao.turma.id,
						periodoId: regPres.alocacaoAula.periodoAvaliativo.id,
						discId   : regPres.itemEducacional.id,
						faltas   : 1
				]
			}

		}
		
		imprimir "TotFaltas: " + totalFaltas

		existe = false

	}

	percorrer(aulas) { aul ->

	//	imprimir aul

	// formatacao de datas e periodos
		periodo = aul.periodoAvaliativo.descricao
		if(periodo == null || periodo == ""){
			periodo = "Anual"
		}

		se(aul.data.mes() < 10) {
			formatData = "0" + aul.data.mes()
			mes = "0" + aul.data.mes() + aul.data.nomeMes()
		} senao {
			formatData = "" + aul.data.mes()
			mes = "" + aul.data.mes() + aul.data.nomeMes()
		}
		se(aul.data.dia() < 10) {
			formatData = formatData + "0" + aul.data.dia()
		} senao {
			formatData = formatData + aul.data.dia()
		}
		se(aul.numero == nulo) {
			formatData = formatData + "1"
		} senao {
			formatData = formatData + aul.numero
		}

		dia = aul.data.dia()

		discp = aul.itemEducacional.descricao
		if(discp.size() < 2){
			discp = aul.itemEducacional.pai.descricao
		}

		percorrer(alunos) { alus ->
		
			//entItemEd = mapaEntItemEd.get(alus.id)
			if(alus.turma.modalidadeTurma == "EJA"){
				percorrer(mapaEntItemEd){map->
					if(alus.id == map.ent){
						entItemEd = map.edu
						parar()
					}
				}
			}
			
			//imprimir "TurmaAula: " + aul.turma.id + " | TurmaAlu: " + alus.turma.id + " | " + entItemEd
		
			if(aul.turma.id == alus.turma.id && (alus.turma.modalidadeTurma != "EJA" || entItemEd == aul.itemEducacional.pai.id || entItemEd == aul.itemEducacional.id)){
				imprimir alus.id + " | " + alus.matricula.aluno.pessoa.nome + " | " + aul.itemEducacional.descricao + " | " + aul.itemEducacional.pai.descricao + " | " + entItemEd + " == " + aul.itemEducacional.id + " | " + aul.itemEducacional.pai.id
				percorrer(totalFaltas) { tf ->

					se(tf.alunoId == alus.id && aul.periodoAvaliativo.id == tf.periodoId && tf.discId == aul.itemEducacional.id) {
						tFaltas = tf.faltas
						parar()
					}
				}

				nomeEData = alus.matricula.aluno.pessoa.nome

				se(alus.dataFim.ano() <= 1900) {
					nomeEData += "Mat:" + (Caracteres.direita("0" + alus.dataInicio.dia(), 2)) + "/" + (Caracteres.direita("0" + alus.dataInicio.mes(), 2)) + "/" + alus.dataInicio.ano()
				} senao {
					nomeEData += "Trn:" + (Caracteres.direita("0" + alus.dataFim.dia(), 2)) + "/" + (Caracteres.direita("0" + alus.dataFim.mes(), 2)) + "/" + alus.dataFim.ano()
				}

				se(aul.data >= alus.dataInicio && (aul.data < alus.dataFim || alus.dataFim.ano() < 1900)) {
		//			se(aul.data >= alus.dataInicio){

					percorrer(presencas) { pres ->

						se(alus.id == pres.enturmacao.id  && aul.id == pres.alocacaoAula.id) {

							fonte.inserirLinha(
									turma: aul.turma.descricao,
									disciplina: discp,
									periodo: periodo,
									nomeAluno: nomeEData,
									dataAula: aul.data,
									numeroAula: aul.numero,
									dataENumero: formatData,
									presenca: 'FALTA',
									estabelecimentoNome: aul.estabelecimento.pessoa.nome,
									estabelecimentoTelefone: "(${aul.estabelecimento.pessoa.telefone.esquerda(2)}) ${aul.estabelecimento.pessoa.telefone.direita(8)}",
									estabelecimentoSite: aul.estabelecimento.pessoa.site,
									professor: professor,
									professorMatricula: professorMatricula,
									aulaMes: mes,
									aulaDia: dia,
									dataInicio: aul.periodoAvaliativo.dataInicial,
									dataFim: aul.periodoAvaliativo.dataFinal,
									turno: aul.turma.turno,
									curso: aul.turma.etapaMatriz.matriz.curso.descricao,
									diretor: diretor,
									diretorMatricula: diretorMatricula,
									coordenador: coordenador,
									coordenadorMatricula: coordenadorMatricula,
									administrativo: administrativo,
									administrativoMatricula: administrativoMatricula
							)
							existe = true
							parar()

		//             imprimir "Turma IN: ${pres.enturmacao.turma.descricao} | Disciplina: ${turma: pres.itemEducacional.descricao} | Nome: ${pres.enturmacao.matricula.aluno.pessoa.nome} | Data: ${aul.data} | Numero: ${aul.numero} | Pres: ${pres.tipo} | Est: ${aul.estabelecimento.pessoa.nome} | Tel: ${aul.estabelecimento.pessoa.telefone} | Site: ${aul.estabelecimento.pessoa.site} | DN: ${formatData}"


						}

		//          imprimir  "COMPARACAO ${alus.matricula.aluno.id} == ${pres.enturmacao.matricula.aluno.id}"
					}

					se(!existe) {
						fonte.inserirLinha(
								turma: aul.turma.descricao,
								disciplina: discp,
								periodo: periodo,
								nomeAluno: nomeEData,
								dataAula: aul.data,
								numeroAula: aul.numero,
								dataENumero: formatData,
								presenca: "PRESENCA",
								estabelecimentoNome: aul.estabelecimento.pessoa.nome,
								estabelecimentoTelefone: "(${aul.estabelecimento.pessoa.telefone.esquerda(2)}) ${aul.estabelecimento.pessoa.telefone.direita(8)}",
								estabelecimentoSite: aul.estabelecimento.pessoa.site,
								professor: professor,
								professorMatricula: professorMatricula,
								aulaMes: mes,
								aulaDia: dia,
								dataInicio: aul.periodoAvaliativo.dataInicial,
								dataFim: aul.periodoAvaliativo.dataFinal,
								turno: aul.turma.turno,
								curso: aul.turma.etapaMatriz.matriz.curso.descricao,
								diretor: diretor,
								diretorMatricula: diretorMatricula,
								coordenador: coordenador,
								coordenadorMatricula: coordenadorMatricula,
								administrativo: administrativo,
								administrativoMatricula: administrativoMatricula
						)

		//          imprimir "Turma OUT: ${aul.turma.descricao} | Disciplina: ${aul.itemEducacional.descricao} | Nome: ${alus.matricula.aluno.pessoa.nome} | Data: ${aul.data} | Numero: ${aul.numero} | Pres: P | Est: ${aul.estabelecimento.pessoa.nome} | Tel: ${aul.estabelecimento.pessoa.telefone} | Site: ${aul.estabelecimento.pessoa.site} | DN: ${formatData} | DATAINICIO: ${alus.dataInicio}"
					}


					existe = false

				} senao {

					//imprimir "NOME: " + nomeEData + " | AULA: " + aul.data + " | INICIO: " + alus.dataInicio + " | FIM: " + alus.dataFim + " | SITUACAO: " + alus.matricula.situacao

					fonte.inserirLinha(
							turma: aul.turma.descricao,
							disciplina: discp,
							periodo: periodo,
							nomeAluno: nomeEData,
							dataAula: aul.data,
							numeroAula: aul.numero,
							dataENumero: formatData,
							presenca: "N",
							estabelecimentoNome: aul.estabelecimento.pessoa.nome,
							estabelecimentoTelefone: "(${aul.estabelecimento.pessoa.telefone.esquerda(2)}) ${aul.estabelecimento.pessoa.telefone.direita(8)}",
							estabelecimentoSite: aul.estabelecimento.pessoa.site,
							professor: professor,
							professorMatricula: professorMatricula,
							aulaMes: mes,
							aulaDia: dia,
							dataInicio: aul.periodoAvaliativo.dataInicial,
							dataFim: aul.periodoAvaliativo.dataFinal,
							turno: aul.turma.turno,
							curso: aul.turma.etapaMatriz.matriz.curso.descricao,
							diretor: diretor,
							diretorMatricula: diretorMatricula,
							coordenador: coordenador,
							coordenadorMatricula: coordenadorMatricula,
							administrativo: administrativo,
							administrativoMatricula: administrativoMatricula
					)

		//       imprimir "Turma OUTER: ${aul.turma.descricao} | Disciplina: ${aul.itemEducacional.descricao} | Nome: ${alus.matricula.aluno.pessoa.nome} | Data: ${aul.data} | Numero: ${aul.numero} | Pres: - | Est: ${aul.estabelecimento.pessoa.nome} | Tel: ${aul.estabelecimento.pessoa.telefone} | Site: ${aul.estabelecimento.pessoa.site} | DN: ${formatData} | DATAINICIO: ${alus.dataInicio}"

				}
			
				fonte.inserirLinha(
						turma: aul.turma.descricao,
						disciplina: discp,
						periodo: periodo,
						nomeAluno: nomeEData,
						dataAula: aul.data,
						numeroAula: 0,
						dataENumero: formatData,
						presenca: "" + tFaltas,
						estabelecimentoNome: aul.estabelecimento.pessoa.nome,
						estabelecimentoTelefone: "(${aul.estabelecimento.pessoa.telefone.esquerda(2)}) ${aul.estabelecimento.pessoa.telefone.direita(8)}",
						estabelecimentoSite: aul.estabelecimento.pessoa.site,
						professor: professor,
						professorMatricula: professorMatricula,
						aulaMes: "13Tot",
						aulaDia: 0,
						dataInicio: aul.periodoAvaliativo.dataInicial,
						dataFim: aul.periodoAvaliativo.dataFinal,
						turno: aul.turma.turno,
						curso: aul.turma.etapaMatriz.matriz.curso.descricao,
						diretor: diretor,
						diretorMatricula: diretorMatricula,
						coordenador: coordenador,
						coordenadorMatricula: coordenadorMatricula,
						administrativo: administrativo,
						administrativoMatricula: administrativoMatricula
				)

				tFaltas = 0
			
			}
			
			entItemEd = 0
		}
		

	}

}


imprimir 'fim script '+ Datas.hoje().formatar('yyyy-MM-dd HH:mm:ss.SSS')

retornar fonte